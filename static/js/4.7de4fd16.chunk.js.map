{"version":3,"sources":["components/Camera.js","custom-hooks/useCamera.js"],"names":["Camera","cameraSource","useState","undefined","mediaStream","setMediaStream","useEffect","videoStream","navigator","mediaDevices","getCameraSource","getVideoTracks","forEach","track","stop","alert","error","name","message","a","getUserMedia","video","width","ideal","height","audio","console","Error","useCamera","Page","title","id","ref","el","srcObject","src","window","URL","createObjectURL","autoPlay","playsInline"],"mappings":"kLAIe,SAASA,IACtB,IAAMC,ECHD,WAAsB,IAAD,EACYC,wBAASC,GADrB,mBACnBC,EADmB,KACNC,EADM,KAsC1B,OApCAC,qBAAU,WAKR,IAAIC,EAJJ,GAAKC,UAAUC,aAqBf,OAtBc,mCAqBdC,GACO,WACL,IACMH,GAAeA,EAAYI,eAC7BJ,EAAYI,iBAAiBC,SAAQ,SAAAC,GACnCA,EAAMC,UAGRC,MAAM,uBAER,MAAOC,GACPD,MAAM,GAAD,OAAIC,EAAMC,KAAV,aAAmBD,EAAME,YAhCpB,4CAMd,sBAAAC,EAAA,+EAEwBX,UAAUC,aAAaW,aAAa,CACtDC,MAAO,CACLC,MAAO,CAAEC,MAAO,MAChBC,OAAQ,CAAED,MAAO,MAEnBE,OAAO,IAPb,OAEIlB,EAFJ,OASIF,EAAeE,GATnB,gDAWImB,QAAQV,MAAM,kBAAd,MACAX,EAAe,EAAD,IAZlB,0DANc,sBAEZA,EAAesB,MAAM,mCAiCtB,IACIvB,EDnCcwB,GAErB,GAAI3B,aAAwB0B,OAAU1B,GAAgBA,EAAagB,KACjE,OACE,kBAACY,EAAA,EAAD,CAAMC,MAAM,4BACT7B,EAAagB,MAAQhB,EAAagB,KADrC,IAC4C,IACzChB,EAAaiB,SAAWjB,EAAaiB,SAe5C,OACE,kBAACW,EAAA,EAAD,CAAMC,MAAM,wBACV,6CACA,2BAAOC,GAAG,aAAaC,IAbD,SAAAC,GACnBhC,GAAiBgC,IAClB,cAAeA,EACjBA,EAAGC,UAAYjC,EAGfgC,EAAGE,IAAMC,OAAOC,IAAIC,gBAAgBrC,KAOWsC,UAAQ,EAACC,aAAW,KA7BzE","file":"static/js/4.7de4fd16.chunk.js","sourcesContent":["import React from \"react\";\nimport Page from \"components/Page\";\nimport { useCamera } from \"custom-hooks/useCamera\";\n\nexport default function Camera() {\n  const cameraSource = useCamera();\n\n  if (cameraSource instanceof Error || (cameraSource && cameraSource.name)) {\n    return (\n      <Page title=\"Camera is NOT supported!\">\n        {cameraSource.name && cameraSource.name}:{\" \"}\n        {cameraSource.message && cameraSource.message}\n      </Page>\n    );\n  }\n\n  const setupCameraSource = el => {\n    if (!cameraSource || !el) return;\n    if (\"srcObject\" in el) {\n      el.srcObject = cameraSource;\n    } else {\n      // For older browsers without the srcObject.\n      el.src = window.URL.createObjectURL(cameraSource);\n    }\n  };\n\n  return (\n    <Page title=\"Camera is supported!\">\n      <div>Video Below?</div>\n      <video id=\"video-chat\" ref={setupCameraSource} autoPlay playsInline />\n    </Page>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nexport function useCamera() {\n  const [mediaStream, setMediaStream] = useState(undefined);\n  useEffect(() => {\n    if (!navigator.mediaDevices) {\n      setMediaStream(Error(\"Media devices not supported.\"));\n      return;\n    }\n    let videoStream;\n    async function getCameraSource() {\n      try {\n        videoStream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: { ideal: 1280 },\n            height: { ideal: 720 }\n          },\n          audio: false\n        });\n        setMediaStream(videoStream);\n      } catch (error) {\n        console.error(\"getCameraSource\", error);\n        setMediaStream(error);\n      }\n    }\n    getCameraSource();\n    return () => {\n      try {\n        if (videoStream && videoStream.getVideoTracks) {\n          videoStream.getVideoTracks().forEach(track => {\n            track.stop();\n          });\n        } else {\n          alert(`Camera not stopped?`);\n        }\n      } catch (error) {\n        alert(`${error.name}: ${error.message}`);\n      }\n    };\n  }, []);\n  return mediaStream;\n}\n"],"sourceRoot":""}
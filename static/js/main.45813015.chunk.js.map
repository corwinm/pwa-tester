{"version":3,"sources":["components/AppUpdate.module.scss","components/Navbar.js","components/About.js","components/Home.js","components/Geolocation.js","components/Footer.js","components/Notifications.js","serviceWorker.js","context/AppUpdateContext.js","components/AppUpdate.js","components/App.js","index.js"],"names":["module","exports","floatingContainer","withShadow","Navbar","_useState","useState","_useState2","Object","slicedToArray","menuOpen","setMenuOpen","toggleMenu","react_default","a","createElement","className","role","aria-label","react_router_dom","to","tabIndex","onClick","aria-expanded","data-target","aria-hidden","id","About","Home","message","navigator","Geolocation","location","undefined","setlocation","useEffect","geolocation","Error","getPosition","watchPosition","e","coords","error","console","timeout","clearWatch","useGeolocation","latitude","longitude","dateTimeStamp","Footer","href","Notifications","window","Notification","permission","setPermission","notification","onclick","focus","this","close","setTimeout","bind","requestPermission","then","newPermission","isLocalhost","Boolean","hostname","match","register","config","URL","process","origin","addEventListener","swUrl","concat","fetch","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","AppUpdateContext","React","createContext","updateAvailable","offLineReady","AppUpdate","useContext","styles","App","appUpdateAvailable","setUpdateAvailable","_useState3","_useState4","setoffLineReady","ignore","useAppUpdateAvailable","Provider","value","basename","react_router","exact","path","component","ReactDOM","render","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.45813015.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"floatingContainer\":\"AppUpdate_floatingContainer__1aESH\",\"withShadow\":\"AppUpdate_withShadow__3Y6Tl\"};","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState } from \"react\";\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar() {\n  const [menuOpen, setMenuOpen] = useState(false);\n  function toggleMenu() {\n    setMenuOpen(!menuOpen)\n  }\n  return (\n    <nav className=\"navbar is-transparent is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <Link to=\"/\" className=\"navbar-item\">PWA Tester</Link>\n        <a\n          tabIndex=\"0\"\n          role=\"button\"\n          className={\"navbar-burger burger \" + (menuOpen ? \"is-active\" : \"\")}\n          onClick={toggleMenu}\n          aria-label=\"menu\"\n          aria-expanded={menuOpen}\n          data-target=\"navbarBasicExample\"\n        >\n          <span aria-hidden=\"true\" />\n          <span aria-hidden=\"true\" />\n          <span aria-hidden=\"true\" />\n        </a>\n      </div>\n      <div id=\"navbarBasicExample\" className={\"navbar-menu \" + (menuOpen ? \"is-active\" : \"\")}>\n        <div className=\"navbar-start\">\n          <Link to=\"/\" onClick={toggleMenu} className=\"navbar-item\">Home</Link>\n          <Link to=\"/about\" onClick={toggleMenu} className=\"navbar-item\">About</Link>\n          <Link to=\"/geolocation\" onClick={toggleMenu} className=\"navbar-item\">Geolocation</Link>\n          <Link to=\"/notifications\" onClick={toggleMenu} className=\"navbar-item\">Notifications</Link>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React from 'react'\n\nexport default function About() {\n  return (\n    <section className=\"section\">\n      About Page\n    </section>\n  )\n}\n","import React from 'react'\n\nexport default function Home() {\n\n  const message = 'serviceWorker' in navigator ? 'ServiceWorker Supported!' : 'ServiceWorker NOT Supported!';\n\n  return (\n    <section className=\"hero is-primary\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 className=\"title\">{message}</h1>\n        </div>\n      </div>\n    </section>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nfunction useGeolocation() {\n  const [location, setlocation] = useState(undefined);\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      return Error(\"Geolocation is not supported.\");\n    }\n    function geoSuccess(e) {\n      setlocation(e.coords);\n    }\n\n    function geoError(error) {\n      console.error(error);\n      setlocation(error);\n    }\n    const getPosition = navigator.geolocation.watchPosition(\n      geoSuccess,\n      geoError,\n      { timeout: 10000 }\n    );\n    return () => {\n      navigator.geolocation.clearWatch(getPosition);\n    };\n  }, []);\n\n  return location;\n}\n\nexport default function Geolocation() {\n  const location = useGeolocation();\n\n  if (location instanceof Error) {\n    return (\n      <section className=\"section\">\n        <h1>Geolocation is NOT suported!</h1>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"section\">\n      <h1>Geolocation is suported!</h1>\n      <div>latitude: {location && location.latitude}</div>\n      <div>longitude: {location && location.longitude}</div>\n    </section>\n  );\n}\n","import React from \"react\";\nimport preval from \"preval.macro\";\n\nconst dateTimeStamp = preval`module.exports = new Date().toLocaleString();`\n\nexport default function Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"content has-text-centered\">\n        <p>\n          <strong>PWA Tester</strong> by{\" \"}\n          <a href=\"https://github.com/corwinm\">Corwin Marsh</a>. The source code\n          is available on{\" \"}\n          <a href=\"https://github.com/corwinm/pwa-tester\">GitHub</a>\n        </p>\n        <p>Built: {dateTimeStamp}</p>\n      </div>\n    </footer>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function Notifications() {\n  const [permission, setPermission] = useState(\n    ('Notification'in window) && Notification.permission\n  );\n\n  if (!permission) {\n    return <div className=\"section\">Notifications are not suported.</div>;\n  }\n  if (permission === \"granted\") {\n    const showTestNotification = () => {\n      const notification = new Notification(\"Hi there!\");\n      notification.onclick = function() {\n        // parent.focus();\n        window.focus();\n        this.close();\n      };\n      setTimeout(notification.close.bind(notification), 4000);\n    };\n\n    return (\n      <div className=\"section\">\n        <div className=\"container is-fluid\">\n          <h1>Test Notification</h1>\n          <div>\n            <button onClick={showTestNotification}>Click Me!</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const requestPermission = () => {\n    Notification.requestPermission().then(newPermission => {\n      setPermission(newPermission);\n    });\n  };\n\n  return (\n    <section className=\"section\">\n      <div className=\"container is-fluid\">\n        <h1>Test Notification</h1>\n        {permission === \"denied\" && <div>Permission Denied</div>}\n        <div>\n          <button onClick={requestPermission}>Request Permission</button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nexport const AppUpdateContext = React.createContext({\n  updateAvailable: false,\n  offLineReady: false\n});\n","import React, { useContext } from \"react\";\nimport * as serviceWorker from '../serviceWorker';\nimport styles from \"./AppUpdate.module.scss\";\nimport { AppUpdateContext } from \"../context/AppUpdateContext\";\n\n\nexport default function AppUpdate() {\n  const appUpdateAvailable = useContext(AppUpdateContext);\n  if (!appUpdateAvailable.updateAvailable) return null;\n\n  const reloadApp = () => {\n    serviceWorker.unregister();\n    window.location.reload();\n  };\n\n  return (\n    <div className={styles.floatingContainer}>\n      <article className={\"message is-primary \" + styles.withShadow}>\n        <div className=\"message-header\">\n          <button\n            className=\"button is-primary is-inverted is-outlined\"\n            onClick={reloadApp}\n          >\n            Update Now\n          </button>\n          <p>New version of the app available!!!</p>\n          <button className=\"delete is-medium\" aria-label=\"delete\" />\n        </div>\n        <div className=\"message-body\">\n          New version will automatically load after all windows reopened.\n        </div>\n      </article>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.scss\";\nimport Navbar from \"./Navbar\";\nimport About from \"./About\";\nimport Home from \"./Home\";\nimport Geolocation from \"./Geolocation\";\nimport Footer from \"./Footer\";\nimport Notifications from \"./Notifications\";\nimport AppUpdate from \"./AppUpdate\";\nimport { AppUpdateContext } from \"../context/AppUpdateContext\";\nimport * as serviceWorker from \"../serviceWorker\";\n\nfunction useAppUpdateAvailable() {\n  const [updateAvailable, setUpdateAvailable] = useState(false);\n  const [offLineReady, setoffLineReady] = useState(false);\n  useEffect(() => {\n    let ignore = false;\n    serviceWorker.register({\n      onUpdate: () => {\n        if (ignore) return;\n        console.log(\"onUpdate called! New content after windows closed!\");\n        setUpdateAvailable(true);\n      },\n      onSuccess: () => {\n        if (ignore) return;\n        console.log(\"onSuccess called! Offline ready!\");\n        setoffLineReady(true);\n      }\n    });\n    return () => {\n      ignore = true;\n    };\n  }, []);\n  return { updateAvailable, offLineReady };\n}\n\nconst App = () => {\n  const appUpdateAvailable = useAppUpdateAvailable();\n  return (\n    <div className=\"App\">\n      <AppUpdateContext.Provider value={appUpdateAvailable}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Navbar />\n\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/geolocation\" component={Geolocation} />\n          <Route path=\"/notifications\" component={Notifications} />\n\n          <Footer />\n          <AppUpdate />\n        </Router>\n      </AppUpdateContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register({\n//   onUpdate: () => { console.log(\"onUpdate called! New content after windows closed!\") },\n//   onSuccess: () => { console.log(\"onSuccess called! Offline ready!\")}\n// });\n"],"sourceRoot":""}